    Документация пользователя. Часть 2. Программное обеспечение.
                           1.  ВВЕДЕНИЕ.

Дистрибутив Calmira GNU/Linux включает в себя только открытое программное
обеспечение (ПО). Основной упор делается на компиляцию ПО из исходных кодов,
однако, в системе присутствует пакетный менеджер cpkg, который может ставить
как бинарные пакеты (для этого и создавался), так и port-пакеты. Port-пакет -
это пакет, в котором не содержится данных пакета, а инструкции по его сборке
из исходных кодов. Port-пакет может включать в себя сам исходный код
программы, либо же скачивать его из репозиториев или других источников
распространения.

cpkg создавался для автоматизированного управления пакетами, и с этой задачей
он справляется прекрасно. На данный момент он умеет устанавливать, удалять и
скачивать пакеты. Его функционал совершенствуется.

Но, как говорилось выше, cpkg - не основной инструмент управления пакетами. На
данный момент очень мало ПО, упакованного в пакеты для cpkg. Поэтому сейчас
советуется использовать именно самостоятельную сборку, а на cpkg надеяться
тогда, когда пакет слишком большой и его компиляция будет длиться долгое
время.

В дистрибутиве Calmira GNU/Linux существует средство ликвидирования ОС. Т.е.,
вы можете без каких-либо проблем выполнить sudo cpkg remove system и у вас
полностью удалится дистрибутив. Останутся только данные о ПК и запущеных
процессах, а так же данные пользователя. Штука сомнительная, но некоторым
может пригодиться.


               2. ОСНОВЫ РАБОТЫ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ.
                     УПРАВЛЕНИЕ ПАКЕТАМИ БЕЗ CPKG.

В данной части речь пойдёт о различных методах управления ПО. Пожалуйста,
ознакомьтесь с ними, чтобы полноценно работать с системой Calmira GNU/Linux.

1. Держать всё у себя в голове.
Это неплохой, но достаточно сложный способ. Можно сказать, не очень возможный,
так как держать в голове информацию о всех пакетах невозможно. А в информацию
входят:
    * название и описание пакета
    * размер пакета (сколько места занимает на диске)
    * установленные файлы

Если вы выбрали этот способ, то заведите себе справочник, в котором будете
фиксировать информацию о каждом пакете.

2. Метод символических ссылок (симлинков).
Этот способ намного легче, хотя больше захламляет ОС. Его главное достоинство
в том, что значительно упрощается управление пакетами. Каждый пакет
устанавливается в отдельную директорию (предположим, /usr/pkg). В этой директории
находятся ещё несколько поддиректорий (например, /usr/pkg/git-1.0), где git-1.0 -
название и версия пакета.

Напрмиер, у нас есть пакет git версии 1.0. Мы устанавливаем его в директорию
/usr/pkg/git-1.0. В итоге, там образовывается такое дерево каталогов:

/usr/pkg/git-1.0
         |--- bin
         |--- sbin
         |--- usr
         |   |--- bin
         |   |--- share
         |--- etc
             |--- git
...

И, либо делаем симлинк бинарного файла из пакета в /usr/bin (или /usr/local/bin),
либо же прописываем путь до бинарного файла пакета в переменную PATH.

При обновлении пакета до новой версии (предположим, до версии 1.1), каталог с
предыдущей версией удаляется, вместо неко создаётся каталог /usr/pkg/git-1.1, и
операция с созданием симлинка повторяется.

3. Метод "опакечивания" программы для пакетного менеджера cpkg.
Способ одновременно и лёгкий, и довольно сложный. Лёгкость заключается в том,
что очень просто удалить данный пакет, да и вообще управлять им. А сложность в
том, что сборку нужно производить в отдельной директории, помимо этого, нужно
следить за тем, чтобы файлы пакета во время сборки не попали в основную ОС, а
устанавливались строго в директорию, предназначенную для сборки. Потом же нужно
рекурсивным способом записать список ВСЕХ файлов в конфиг для cpkg.

В остальном же, трудностей никаких нет. Строение пакета очень простое, ставится
быстро. О строении смотрите в следующей части руководства.
